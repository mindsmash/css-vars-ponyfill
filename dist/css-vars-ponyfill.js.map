{"version":3,"file":"css-vars-ponyfill.js","sources":["../node_modules/get-css-data/dist/get-css-data.esm.js","../src/merge-deep.js","../node_modules/balanced-match/index.js","../src/parse-css.js","../src/stringify-css.js","../src/walk-css.js","../src/transform-css.js","../src/index.js"],"sourcesContent":["/*!\n * get-css-data\n * v1.4.0\n * https://github.com/jhildenbiddle/get-css-data\n * (c) 2018 John Hildenbiddle <http://hildenbiddle.com>\n * MIT license\n */\nfunction getUrls(urls) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var settings = {\n        mimeType: options.mimeType || null,\n        onBeforeSend: options.onBeforeSend || Function.prototype,\n        onSuccess: options.onSuccess || Function.prototype,\n        onError: options.onError || Function.prototype,\n        onComplete: options.onComplete || Function.prototype\n    };\n    var urlArray = Array.isArray(urls) ? urls : [ urls ];\n    var urlQueue = Array.apply(null, Array(urlArray.length)).map(function(x) {\n        return null;\n    });\n    function onError(xhr, urlIndex) {\n        settings.onError(xhr, urlArray[urlIndex], urlIndex);\n    }\n    function onSuccess(responseText, urlIndex) {\n        var returnVal = settings.onSuccess(responseText, urlArray[urlIndex], urlIndex);\n        responseText = returnVal === false ? \"\" : returnVal || responseText;\n        urlQueue[urlIndex] = responseText;\n        if (urlQueue.indexOf(null) === -1) {\n            settings.onComplete(urlQueue);\n        }\n    }\n    urlArray.forEach(function(url, i) {\n        var parser = document.createElement(\"a\");\n        parser.setAttribute(\"href\", url);\n        parser.href = String(parser.href);\n        var isCrossDomain = parser.host !== location.host;\n        var isSameProtocol = parser.protocol === location.protocol;\n        if (isCrossDomain && typeof XDomainRequest !== \"undefined\") {\n            if (isSameProtocol) {\n                var xdr = new XDomainRequest();\n                xdr.open(\"GET\", url);\n                xdr.timeout = 0;\n                xdr.onprogress = Function.prototype;\n                xdr.ontimeout = Function.prototype;\n                xdr.onload = function() {\n                    onSuccess(xdr.responseText, i);\n                };\n                xdr.onerror = function(err) {\n                    onError(xdr, i);\n                };\n                setTimeout(function() {\n                    xdr.send();\n                }, 0);\n            } else {\n                console.log(\"Internet Explorer 9 Cross-Origin (CORS) requests must use the same protocol\");\n                onError(null, i);\n            }\n        } else {\n            var xhr = new XMLHttpRequest();\n            xhr.open(\"GET\", url);\n            if (settings.mimeType && xhr.overrideMimeType) {\n                xhr.overrideMimeType(settings.mimeType);\n            }\n            settings.onBeforeSend(xhr, url, i);\n            xhr.onreadystatechange = function() {\n                if (xhr.readyState === 4) {\n                    if (xhr.status === 200) {\n                        onSuccess(xhr.responseText, i);\n                    } else {\n                        onError(xhr, i);\n                    }\n                }\n            };\n            xhr.send();\n        }\n    });\n}\n\n/**\n * Gets CSS data from <style> and <link> nodes (including @imports), then\n * returns data in order processed by DOM. Allows specifying nodes to\n * include/exclude and filtering CSS data using RegEx.\n *\n * @preserve\n * @param {object}   [options] The options object\n * @param {object}   [options.rootElement=document] Root element to traverse for\n *                   <link> and <style> nodes.\n * @param {string}   [options.include] CSS selector matching <link> and <style>\n *                   nodes to include\n * @param {string}   [options.exclude] CSS selector matching <link> and <style>\n *                   nodes to exclude\n * @param {object}   [options.filter] Regular expression used to filter node CSS\n *                   data. Each block of CSS data is tested against the filter,\n *                   and only matching data is included.\n * @param {object}   [options.useCSSOM=false] Determines if CSS data will be\n *                   collected from a stylesheet's runtime values instead of its\n *                   text content. This is required to get accurate CSS data\n *                   when a stylesheet has been modified using the deleteRule()\n *                   or insertRule() methods because these modifications will\n *                   not be reflected in the stylesheet's text content.\n * @param {function} [options.onBeforeSend] Callback before XHR is sent. Passes\n *                   1) the XHR object, 2) source node reference, and 3) the\n *                   source URL as arguments.\n * @param {function} [options.onSuccess] Callback on each CSS node read. Passes\n *                   1) CSS text, 2) source node reference, and 3) the source\n *                   URL as arguments.\n * @param {function} [options.onError] Callback on each error. Passes 1) the XHR\n *                   object for inspection, 2) soure node reference, and 3) the\n *                   source URL that failed (either a <link> href or an @import)\n *                   as arguments\n * @param {function} [options.onComplete] Callback after all nodes have been\n *                   processed. Passes 1) concatenated CSS text, 2) an array of\n *                   CSS text in DOM order, and 3) an array of nodes in DOM\n *                   order as arguments.\n *\n * @example\n *\n *   getCssData({\n *     rootElement: document,\n *     include    : 'style,link[rel=\"stylesheet\"]',\n *     exclude    : '[href=\"skip.css\"]',\n *     filter     : /red/,\n *     useCSSOM   : false,\n *     onBeforeSend(xhr, node, url) {\n *       // ...\n *     }\n *     onSuccess(cssText, node, url) {\n *       // ...\n *     }\n *     onError(xhr, node, url) {\n *       // ...\n *     },\n *     onComplete(cssText, cssArray, nodeArray) {\n *       // ...\n *     }\n *   });\n */ function getCssData(options) {\n    var regex = {\n        cssComments: /\\/\\*[\\s\\S]+?\\*\\//g,\n        cssImports: /(?:@import\\s*)(?:url\\(\\s*)?(?:['\"])([^'\"]*)(?:['\"])(?:\\s*\\))?(?:[^;]*;)/g\n    };\n    var settings = {\n        rootElement: options.rootElement || document,\n        include: options.include || 'style,link[rel=\"stylesheet\"]',\n        exclude: options.exclude || null,\n        filter: options.filter || null,\n        useCSSOM: options.useCSSOM || false,\n        onBeforeSend: options.onBeforeSend || Function.prototype,\n        onSuccess: options.onSuccess || Function.prototype,\n        onError: options.onError || Function.prototype,\n        onComplete: options.onComplete || Function.prototype\n    };\n    var sourceNodes = Array.apply(null, settings.rootElement.querySelectorAll(settings.include)).filter(function(node) {\n        return !matchesSelector(node, settings.exclude);\n    });\n    var cssArray = Array.apply(null, Array(sourceNodes.length)).map(function(x) {\n        return null;\n    });\n    function handleComplete() {\n        var isComplete = cssArray.indexOf(null) === -1;\n        if (isComplete) {\n            var cssText = cssArray.join(\"\");\n            settings.onComplete(cssText, cssArray, sourceNodes);\n        }\n    }\n    function handleSuccess(cssText, cssIndex, node, sourceUrl) {\n        var returnVal = settings.onSuccess(cssText, node, sourceUrl);\n        cssText = returnVal === false ? \"\" : returnVal || cssText;\n        resolveImports(cssText, node, sourceUrl, function(resolvedCssText, errorData) {\n            if (cssArray[cssIndex] === null) {\n                errorData.forEach(function(data) {\n                    return settings.onError(data.xhr, node, data.url);\n                });\n                if (!settings.filter || settings.filter.test(resolvedCssText)) {\n                    cssArray[cssIndex] = resolvedCssText;\n                } else {\n                    cssArray[cssIndex] = \"\";\n                }\n                handleComplete();\n            }\n        });\n    }\n    function parseImportData(cssText, baseUrl) {\n        var ignoreRules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n        var importData = {};\n        importData.rules = (cssText.replace(regex.cssComments, \"\").match(regex.cssImports) || []).filter(function(rule) {\n            return ignoreRules.indexOf(rule) === -1;\n        });\n        importData.urls = importData.rules.map(function(rule) {\n            return rule.replace(regex.cssImports, \"$1\");\n        });\n        importData.absoluteUrls = importData.urls.map(function(url) {\n            return getFullUrl(url, baseUrl);\n        });\n        importData.absoluteRules = importData.rules.map(function(rule, i) {\n            var oldUrl = importData.urls[i];\n            var newUrl = getFullUrl(importData.absoluteUrls[i], baseUrl);\n            return rule.replace(oldUrl, newUrl);\n        });\n        return importData;\n    }\n    function resolveImports(cssText, node, baseUrl, callbackFn) {\n        var __errorData = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n        var __errorRules = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n        var importData = parseImportData(cssText, baseUrl, __errorRules);\n        if (importData.rules.length) {\n            getUrls(importData.absoluteUrls, {\n                onBeforeSend: function onBeforeSend(xhr, url, urlIndex) {\n                    settings.onBeforeSend(xhr, node, url);\n                },\n                onSuccess: function onSuccess(cssText, url, urlIndex) {\n                    var returnVal = settings.onSuccess(cssText, node, url);\n                    cssText = returnVal === false ? \"\" : returnVal || cssText;\n                    var responseImportData = parseImportData(cssText, url, __errorRules);\n                    responseImportData.rules.forEach(function(rule, i) {\n                        cssText = cssText.replace(rule, responseImportData.absoluteRules[i]);\n                    });\n                    return cssText;\n                },\n                onError: function onError(xhr, url, urlIndex) {\n                    __errorData.push({\n                        xhr: xhr,\n                        url: url\n                    });\n                    __errorRules.push(importData.rules[urlIndex]);\n                    resolveImports(cssText, node, baseUrl, callbackFn, __errorData, __errorRules);\n                },\n                onComplete: function onComplete(responseArray) {\n                    responseArray.forEach(function(importText, i) {\n                        cssText = cssText.replace(importData.rules[i], importText);\n                    });\n                    resolveImports(cssText, node, baseUrl, callbackFn, __errorData, __errorRules);\n                }\n            });\n        } else {\n            callbackFn(cssText, __errorData);\n        }\n    }\n    if (sourceNodes.length) {\n        sourceNodes.forEach(function(node, i) {\n            var linkHref = node.getAttribute(\"href\");\n            var linkRel = node.getAttribute(\"rel\");\n            var isLink = node.nodeName === \"LINK\" && linkHref && linkRel && linkRel.toLowerCase() === \"stylesheet\";\n            var isStyle = node.nodeName === \"STYLE\";\n            if (isLink) {\n                getUrls(linkHref, {\n                    mimeType: \"text/css\",\n                    onBeforeSend: function onBeforeSend(xhr, url, urlIndex) {\n                        settings.onBeforeSend(xhr, node, url);\n                    },\n                    onSuccess: function onSuccess(cssText, url, urlIndex) {\n                        var sourceUrl = getFullUrl(linkHref, location.href);\n                        handleSuccess(cssText, i, node, sourceUrl);\n                    },\n                    onError: function onError(xhr, url, urlIndex) {\n                        cssArray[i] = \"\";\n                        settings.onError(xhr, node, url);\n                        handleComplete();\n                    }\n                });\n            } else if (isStyle) {\n                var cssText = node.textContent;\n                if (settings.useCSSOM) {\n                    cssText = Array.apply(null, node.sheet.cssRules).map(function(rule) {\n                        return rule.cssText;\n                    }).join(\"\");\n                }\n                handleSuccess(cssText, i, node, location.href);\n            } else {\n                cssArray[i] = \"\";\n                handleComplete();\n            }\n        });\n    } else {\n        settings.onComplete(\"\", []);\n    }\n}\n\nfunction getFullUrl(url) {\n    var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : location.href;\n    var d = document.implementation.createHTMLDocument(\"\");\n    var b = d.createElement(\"base\");\n    var a = d.createElement(\"a\");\n    d.head.appendChild(b);\n    d.body.appendChild(a);\n    b.href = base;\n    a.href = url;\n    return a.href;\n}\n\nfunction matchesSelector(elm, selector) {\n    var matches = elm.matches || elm.matchesSelector || elm.webkitMatchesSelector || elm.mozMatchesSelector || elm.msMatchesSelector || elm.oMatchesSelector;\n    return matches.call(elm, selector);\n}\n\nexport default getCssData;\n//# sourceMappingURL=get-css-data.esm.js.map\n","// Functions\n// =============================================================================\n/**\n * Performs a deep merge of objects and returns new object. Does not modify\n * objects (immutable) and merges arrays via concatenation.\n *\n * @param {...object} objects - Objects to merge\n * @returns {object} New object with merged key/values\n */\nfunction mergeDeep(...objects) {\n    const isObject = obj => obj instanceof Object && obj.constructor === Object;\n\n    return objects.reduce((prev, obj) => {\n        Object.keys(obj).forEach(key => {\n            const pVal = prev[key];\n            const oVal = obj[key];\n\n            // if (Array.isArray(pVal) && Array.isArray(oVal)) {\n            //     prev[key] = pVal.concat(...oVal);\n            // }\n            if (isObject(pVal) && isObject(oVal)) {\n                prev[key] = mergeDeep(pVal, oVal);\n            }\n            else {\n                prev[key] = oVal;\n            }\n        });\n\n        return prev;\n    }, {});\n}\n\n\n// Export\n// =============================================================================\nexport default mergeDeep;\n","'use strict';\nmodule.exports = balanced;\nfunction balanced(a, b, str) {\n  if (a instanceof RegExp) a = maybeMatch(a, str);\n  if (b instanceof RegExp) b = maybeMatch(b, str);\n\n  var r = range(a, b, str);\n\n  return r && {\n    start: r[0],\n    end: r[1],\n    pre: str.slice(0, r[0]),\n    body: str.slice(r[0] + a.length, r[1]),\n    post: str.slice(r[1] + b.length)\n  };\n}\n\nfunction maybeMatch(reg, str) {\n  var m = str.match(reg);\n  return m ? m[0] : null;\n}\n\nbalanced.range = range;\nfunction range(a, b, str) {\n  var begs, beg, left, right, result;\n  var ai = str.indexOf(a);\n  var bi = str.indexOf(b, ai + 1);\n  var i = ai;\n\n  if (ai >= 0 && bi > 0) {\n    begs = [];\n    left = str.length;\n\n    while (i >= 0 && !result) {\n      if (i == ai) {\n        begs.push(i);\n        ai = str.indexOf(a, i + 1);\n      } else if (begs.length == 1) {\n        result = [ begs.pop(), bi ];\n      } else {\n        beg = begs.pop();\n        if (beg < left) {\n          left = beg;\n          right = bi;\n        }\n\n        bi = str.indexOf(b, i + 1);\n      }\n\n      i = ai < bi && ai >= 0 ? ai : bi;\n    }\n\n    if (begs.length) {\n      result = [ left, right ];\n    }\n  }\n\n  return result;\n}\n","/**\n * Based on css parser/compiler by NxChg\n * https://github.com/NxtChg/pieces/tree/master/js/css_parser\n */\n\n\n// Functions\n// =============================================================================\n/**\n * Parses CSS string and generates AST object\n *\n * @param {string} css The CSS stringt to be converted to an AST\n * @returns {object}\n */\nfunction cssParse(css) {\n    const errors = [];\n\n    // Errors\n    // -------------------------------------------------------------------------\n    function error(msg) {\n        throw new Error(`CSS parse error: ${msg}`);\n    }\n\n    // RegEx\n    // -------------------------------------------------------------------------\n    // Match regexp and return captures\n    function match(re) {\n        const m = re.exec(css);\n\n        if (m) {\n            css = css.slice(m[0].length);\n\n            return m;\n        }\n    }\n\n    function whitespace() {\n        match(/^\\s*/);\n    }\n    function open() {\n        return match(/^{\\s*/);\n    }\n    function close() {\n        return match(/^}/);\n    }\n\n    // Comments\n    // -------------------------------------------------------------------------\n    function comment() {\n        whitespace();\n\n        if (css[0] !== '/' || css[1] !== '*') { return; }\n\n        let i = 2;\n        while (css[i] && (css[i] !== '*' || css[i + 1] !== '/')) { i++; }\n\n        // FIXED\n        if (!css[i]) { return error('end of comment is missing'); }\n\n        const str = css.slice(2, i);\n        css = css.slice(i + 2);\n\n        return { type: 'comment', comment: str };\n    }\n    function comments() {\n        const cmnts = [];\n\n        let c;\n\n        while ((c = comment())) {\n            cmnts.push(c);\n        }\n        return cmnts;\n    }\n\n    // Selector\n    // -------------------------------------------------------------------------\n    function selector() {\n        whitespace();\n        while (css[0] === '}') {\n            error('extra closing bracket');\n        }\n\n        const m = match(/^((\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'|[^{])+)/);\n\n        if (m)\n        { return m[0]\n            .trim() // remove all comments from selectors\n            .replace(/\\/\\*([^*]|[\\r\\n]|(\\*+([^*/]|[\\r\\n])))*\\*\\/+/g, '')\n            .replace(/\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'/g, function(m) {\n                return m.replace(/,/g, '\\u200C');\n            })\n            .split(/\\s*(?![^(]*\\)),\\s*/)\n            .map(function(s) {\n                return s.replace(/\\u200C/g, ',');\n            }); }\n    }\n\n    // Declarations\n    // -------------------------------------------------------------------------\n    function declaration() {\n        match(/^([;\\s]*)+/); // ignore empty declarations + whitespace\n\n        const comment_regexp = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\n        let prop = match(/^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/);\n        if (!prop) { return; }\n\n        prop = prop[0].trim();\n\n        if (!match(/^:\\s*/)) { return error('property missing \\':\\''); }\n\n        // Quotes regex repeats verbatim inside and outside parentheses\n        const val = match(/^((?:\\/\\*.*?\\*\\/|'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\((\\s*'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|[^)]*?)\\s*\\)|[^};])+)/);\n\n        const ret = { type: 'declaration', property: prop.replace(comment_regexp, ''), value: val ? val[0].replace(comment_regexp, '').trim() : '' };\n\n        match(/^[;\\s]*/);\n\n        return ret;\n    }\n    function declarations() {\n        if (!open()) { return error('missing \\'{\\''); }\n\n        let d,\n            decls = comments();\n\n        while ((d = declaration())) {\n            decls.push(d);\n            decls = decls.concat(comments());\n        }\n\n        if (!close()) { return error('missing \\'}\\''); }\n\n        return decls;\n    }\n\n    // Keyframes\n    // -------------------------------------------------------------------------\n    function keyframe() {\n        whitespace();\n\n        const vals = [];\n\n        let m;\n\n        while ((m = match(/^((\\d+\\.\\d+|\\.\\d+|\\d+)%?|[a-z]+)\\s*/))) {\n            vals.push(m[1]);\n            match(/^,\\s*/);\n        }\n\n        if (vals.length) { return { type: 'keyframe', values: vals, declarations: declarations() }; }\n    }\n    function at_keyframes() {\n        let m = match(/^@([-\\w]+)?keyframes\\s*/);\n\n        if (!m) { return; }\n\n        const vendor = m[1];\n\n        m = match(/^([-\\w]+)\\s*/);\n        if (!m) { return error('@keyframes missing name'); } // identifier\n\n        const name = m[1];\n\n        if (!open()) { return error('@keyframes missing \\'{\\''); }\n\n        let frame,\n            frames = comments();\n        while ((frame = keyframe())) {\n            frames.push(frame);\n            frames = frames.concat(comments());\n        }\n\n        if (!close()) { return error('@keyframes missing \\'}\\''); }\n\n        return { type: 'keyframes', name: name, vendor: vendor, keyframes: frames };\n    }\n\n    // @ Rules\n    // -------------------------------------------------------------------------\n    function at_page() {\n        const m = match(/^@page */);\n        if (m) {\n            const sel = selector() || [];\n            return { type: 'page', selectors: sel, declarations: declarations() };\n        }\n    }\n    function at_fontface() {\n        const m = match(/^@font-face\\s*/);\n        if (m) { return { type: 'font-face', declarations: declarations() }; }\n    }\n    function at_supports() {\n        const m = match(/^@supports *([^{]+)/);\n        if (m) { return { type: 'supports', supports: m[1].trim(), rules: rules() }; }\n    }\n    function at_host() {\n        const m = match(/^@host\\s*/);\n        if (m) { return { type: 'host', rules: rules() }; }\n    }\n    function at_media() {\n        const m = match(/^@media *([^{]+)/);\n        if (m) { return { type: 'media', media: m[1].trim(), rules: rules() }; }\n    }\n    function at_custom_m() {\n        const m = match(/^@custom-media\\s+(--[^\\s]+)\\s*([^{;]+);/);\n        if (m) { return { type: 'custom-media', name: m[1].trim(), media: m[2].trim() }; }\n    }\n    function at_document() {\n        const m = match(/^@([-\\w]+)?document *([^{]+)/);\n        // FIXED\n        if (m) { return { type: 'document', document: m[2].trim(), vendor: m[1] ? m[1].trim() : null, rules: rules() }; }\n    }\n    function at_x() {\n        const m = match(/^@(import|charset|namespace)\\s*([^;]+);/);\n        if (m) { return { type: m[1], name: m[2].trim() }; }\n    }\n    function at_rule() {\n        whitespace();\n        if (css[0] === '@') { return at_keyframes() || at_supports() || at_host() || at_media() || at_custom_m() || at_page() || at_document() || at_fontface() || at_x(); }\n    }\n\n    // Rules\n    // -------------------------------------------------------------------------\n    function rule() {\n        const sel = selector() || [];\n        if (!sel.length) { error('selector missing'); }\n\n        const decls = declarations();\n\n        return { type: 'rule', selectors: sel, declarations: decls };\n    }\n    function rules(core) {\n        if (!core && !open()) { return error('missing \\'{\\''); }\n\n        let node,\n            rules = comments();\n\n        while (css.length && (core || css[0] !== '}') && (node = at_rule() || rule())) {\n            rules.push(node);\n            rules = rules.concat(comments());\n        }\n\n        if (!core && !close()) { return error('missing \\'}\\''); }\n\n        return rules;\n    }\n\n    return { type: 'stylesheet', stylesheet: { rules: rules(true), errors: errors } };\n}\n\n\n// Exports\n// =============================================================================\nexport default cssParse;\n","/**\n * Based on css parser/compiler by NxChg\n * https://github.com/NxtChg/pieces/tree/master/js/css_parser\n */\n\n\n// Functions\n// =============================================================================\n/**\n * Compiles CSS AST to string\n *\n * @param {object}   tree CSS AST object\n * @param {string}   [delim=''] CSS rule delimiter\n * @param {function} cb Function to be called before each node is processed\n * @returns {string}\n */\nfunction stringifyCss(tree, delim = '', cb) {\n    const renderMethods = {\n        charset(node) {\n            return '@charset ' + node.name + ';';\n        },\n        comment(node) {\n            // Preserve ponyfill marker comments\n            return node.comment.indexOf('__CSSVARSPONYFILL') === 0 ? '/*' + node.comment + '*/' : '';\n        },\n        'custom-media'(node) {\n            return '@custom-media ' + node.name + ' ' + node.media + ';';\n        },\n        declaration(node) {\n            return node.property + ':' + node.value + ';';\n        },\n        document(node) {\n            return '@' + (node.vendor || '') + 'document ' + node.document + '{' + visit(node.rules) + '}';\n        },\n        'font-face'(node) {\n            return '@font-face' + '{' + visit(node.declarations) + '}';\n        },\n        host(node) {\n            return '@host' + '{' + visit(node.rules) + '}';\n        },\n        import(node) {\n            // FIXED\n            return '@import ' + node.name + ';';\n        },\n        keyframe(node) {\n            return node.values.join(',') + '{' + visit(node.declarations) + '}';\n        },\n        keyframes(node) {\n            return '@' + (node.vendor || '') + 'keyframes ' + node.name + '{' + visit(node.keyframes) + '}';\n        },\n        media(node) {\n            return '@media ' + node.media + '{' + visit(node.rules) + '}';\n        },\n        namespace(node) {\n            return '@namespace ' + node.name + ';';\n        },\n        page(node) {\n            return '@page ' + (node.selectors.length ? node.selectors.join(', ') : '') + '{' + visit(node.declarations) + '}';\n        },\n        rule(node) {\n            const decls = node.declarations;\n\n            if (decls.length) {\n                return node.selectors.join(',') + '{' + visit(decls) + '}';\n            }\n        },\n        supports(node) {\n            // FIXED\n            return '@supports ' + node.supports + '{' + visit(node.rules) + '}';\n        }\n    };\n\n    function visit(nodes) {\n        let buf = '';\n\n        for (let i = 0; i < nodes.length; i++) {\n            const n = nodes[i];\n\n            if (cb) {\n                cb(n);\n            }\n\n            const txt = renderMethods[n.type](n);\n\n            if (txt) {\n                buf += txt;\n\n                if (txt.length && n.selectors) {\n                    buf += delim;\n                }\n            }\n        }\n\n        return buf;\n    }\n\n    return visit(tree.stylesheet.rules);\n}\n\n\n// Exports\n// =============================================================================\nexport default stringifyCss;\n","/**\n * Based on rework-visit by reworkcss\n * https://github.com/reworkcss/rework-visit\n */\n\n\n// Functions\n// =============================================================================\n/**\n * Visit `node` declarations recursively and invoke `fn(declarations, node)`.\n *\n * @param {object} node\n * @param {function} fn\n */\nfunction walkCss(node, fn){\n    node.rules.forEach(function(rule){\n        // @media etc\n        if (rule.rules) {\n            walkCss(rule, fn);\n\n            return;\n        }\n\n        // keyframes\n        if (rule.keyframes) {\n            rule.keyframes.forEach(function(keyframe){\n                if (keyframe.type === 'keyframe') {\n                    fn(keyframe.declarations, rule);\n                }\n            });\n\n            return;\n        }\n\n        // @charset, @import etc\n        if (!rule.declarations) {\n            return;\n        }\n\n        fn(rule.declarations, node);\n    });\n}\n\n\n// Exports\n// =============================================================================\nexport default walkCss;\n","/**\n * Based on rework-vars by reworkcss\n * https://github.com/reworkcss/rework-vars\n */\n\n\n// Dependencies\n// =============================================================================\nimport balanced     from 'balanced-match';\nimport mergeDeep    from './merge-deep';\nimport parseCss     from './parse-css';\nimport stringifyCss from './stringify-css';\nimport walkCss      from './walk-css';\n\n\n// Constants & Variables\n// =============================================================================\nconst VAR_PROP_IDENTIFIER  = '--';\nconst VAR_FUNC_IDENTIFIER  = 'var';\nconst variablePersistStore = {};\n\n\n// Functions\n// =============================================================================\n/**\n * Transforms W3C-style CSS variables to static values and returns an updated\n * CSS string.\n *\n * @param {object}   cssText CSS containing variable definitions and functions\n * @param {object}   [options] Options object\n * @param {boolean}  [options.fixNestedCalc=true] Removes nested 'calc' keywords\n *                   for legacy browser compatibility.\n * @param {boolean}  [options.onlyVars=true] Remove declarations that do not\n *                   contain a CSS variable from the return value. Note that\n *                   @font-face and @keyframe rules require all declarations to\n *                   be returned if a CSS variable is used.\n * @param {boolean}  [options.persist=false] Persists options.variables,\n *                   allowing variables set in previous calls to be applied in\n *                   subsequent calls.\n * @param {boolean}  [options.preserve=false] Preserve CSS variable definitions\n *                   and functions in the return value, allowing \"live\" variable\n *                   updates via JavaScript to continue working in browsers with\n *                   native CSS variable support.\n * @param {object}   [options.variables={}] CSS variable definitions to include\n *                   during transformation. Can be used to add new override\n *                   exisitng definitions.\n * @param {function} [options.onWarning] Callback on each transformation\n *                   warning. Passes 1) warningMessage as an argument.\n * @returns {string}\n */\nfunction transformVars(cssText, options = {}) {\n    const defaults = {\n        fixNestedCalc: true,\n        onlyVars     : true,\n        persist      : false,\n        preserve     : false,\n        variables    : {},\n        onWarning() {}\n    };\n    const settings = mergeDeep(defaults, options);\n    const map      = settings.persist ? variablePersistStore : JSON.parse(JSON.stringify(variablePersistStore));\n\n    // Convert cssText to AST (this could throw errors)\n    const cssTree = parseCss(cssText);\n\n    // Remove non-vars\n    if (settings.onlyVars) {\n        cssTree.stylesheet.rules = filterVars(cssTree.stylesheet.rules);\n    }\n\n    // Define variables\n    cssTree.stylesheet.rules.forEach(function(rule) {\n        const varNameIndices = [];\n\n        if (rule.type !== 'rule') {\n            return;\n        }\n\n        // only variables declared for `:root` are supported\n        if (rule.selectors.length !== 1 || rule.selectors[0] !== ':root') {\n            return;\n        }\n\n        rule.declarations.forEach(function(decl, i) {\n            const prop = decl.property;\n            const value = decl.value;\n\n            if (prop && prop.indexOf(VAR_PROP_IDENTIFIER) === 0) {\n                map[prop] = value;\n                varNameIndices.push(i);\n            }\n        });\n\n        // optionally remove `--*` properties from the rule\n        if (!settings.preserve) {\n            for (let i = varNameIndices.length - 1; i >= 0; i--) {\n                rule.declarations.splice(varNameIndices[i], 1);\n            }\n        }\n    });\n\n    // Handle variables defined in settings.variables\n    if (Object.keys(settings.variables).length) {\n        const newRule = {\n            declarations: [],\n            selectors   : [':root'],\n            type        : 'rule'\n        };\n\n        Object.keys(settings.variables).forEach(key => {\n            // Convert all property names to leading '--' style\n            const prop  = `--${key.replace(/^-+/, '')}`;\n            const value = settings.variables[key];\n\n            // Update map value with settings.variables value\n            if (map[prop] !== value) {\n                map[prop] = value;\n\n                // Add new declaration to newRule\n                newRule.declarations.push({\n                    type    : 'declaration',\n                    property: prop,\n                    value   : value\n                });\n            }\n        });\n\n        // Append new :root ruleset\n        if (settings.preserve && newRule.declarations.length) {\n            cssTree.stylesheet.rules.push(newRule);\n        }\n    }\n\n    // Resolve variables\n    walkCss(cssTree.stylesheet, function(declarations, node) {\n        let decl;\n        let resolvedValue;\n        let value;\n\n        for (let i = 0; i < declarations.length; i++) {\n            decl = declarations[i];\n            value = decl.value;\n\n            // skip comments\n            if (decl.type !== 'declaration') {\n                continue;\n            }\n\n            // skip values that don't contain variable functions\n            if (!value || value.indexOf(VAR_FUNC_IDENTIFIER + '(') === -1) {\n                continue;\n            }\n\n            resolvedValue = resolveValue(value, map, settings);\n\n            if (resolvedValue !== decl.value) {\n                if (!settings.preserve) {\n                    decl.value = resolvedValue;\n                }\n                else {\n                    declarations.splice(i, 0, {\n                        type    : decl.type,\n                        property: decl.property,\n                        value   : resolvedValue\n                    });\n\n                    // skip ahead of preserved declaration\n                    i++;\n                }\n            }\n        }\n    });\n\n    // Fix nested calc() values\n    if (settings.fixNestedCalc) {\n        fixNestedCalc(cssTree.stylesheet.rules);\n    }\n\n    // Return CSS string\n    return stringifyCss(cssTree);\n}\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Filters rules recursively, retaining only declarations that contain either a\n * CSS variable definition (property) or function (value). Maintains all\n * declarations for @font-face and @keyframes rules that contain a CSS\n * definition or function.\n *\n * @param {array} rules\n * @returns {array}\n */\nfunction filterVars(rules) {\n    return rules.filter(rule => {\n        // Rule, @font-face, @host, @page\n        if (rule.declarations) {\n            const declArray = rule.declarations.filter(d => {\n                const hasVarProp = d.property && d.property.indexOf(VAR_PROP_IDENTIFIER) === 0;\n                const hasVarVal  = d.value && d.value.indexOf(VAR_FUNC_IDENTIFIER + '(') > -1;\n\n                return hasVarProp || hasVarVal;\n            });\n\n            // For most rule types the filtered declarations should be applied.\n            // @font-face declaratons are unique and require all declarations to\n            // be retained if any declaration contains a CSS variable definition\n            // or value.\n            if (rule.type !== 'font-face') {\n                rule.declarations = declArray;\n            }\n\n            return Boolean(declArray.length);\n        }\n        // @keyframes\n        else if (rule.keyframes) {\n            // @keyframe rules require all declarations to be retained if any\n            // declaration contains a CSS variable definition or value.\n            return Boolean(rule.keyframes.filter(k =>\n                Boolean(k.declarations.filter(d => {\n                    const hasVarProp = d.property && d.property.indexOf(VAR_PROP_IDENTIFIER) === 0;\n                    const hasVarVal  = d.value && d.value.indexOf(VAR_FUNC_IDENTIFIER + '(') > -1;\n\n                    return hasVarProp || hasVarVal;\n                }).length)\n            ).length);\n        }\n        // @document, @media, @supports\n        else if (rule.rules) {\n            rule.rules = filterVars(rule.rules).filter(r => r.declarations && r.declarations.length);\n\n            return Boolean(rule.rules.length);\n        }\n\n        return true;\n    });\n}\n\n/**\n * Removes nested calc keywords for legacy browser compatibility.\n * Example: calc(1 + calc(2 + calc(3 + 3))) => calc(1 + (2 + (3 + 3)))\n *\n * @param {array} rules\n */\nfunction fixNestedCalc(rules) {\n    const reCalcExp = /(-[a-z]+-)?calc\\(/; // Match \"calc(\" or \"-vendor-calc(\"\n\n    rules.forEach(rule => {\n        if (rule.declarations) {\n            rule.declarations.forEach(decl => {\n                let oldValue = decl.value;\n                let newValue = '';\n\n                while (reCalcExp.test(oldValue)) {\n                    const rootCalc = balanced('calc(', ')', oldValue || '');\n\n                    oldValue = oldValue.slice(rootCalc.end);\n\n                    while (reCalcExp.test(rootCalc.body)) {\n                        const nestedCalc = balanced(reCalcExp, ')', rootCalc.body);\n\n                        rootCalc.body = `${nestedCalc.pre}(${nestedCalc.body})${nestedCalc.post}`;\n                    }\n\n                    newValue += `${rootCalc.pre}calc(${rootCalc.body}`;\n                    newValue += !reCalcExp.test(oldValue) ? `)${rootCalc.post}` : '';\n                }\n\n                decl.value = newValue || decl.value;\n            });\n        }\n    });\n}\n\n/**\n * Resolves CSS var() function(s) with `map` data or fallback value(s). Returns\n * original `value` if unable to resolve.\n *\n * @param {string} value String containing CSS var() functions to resolve\n * @param {object} map CSS custom property key/values\n * @param {object} settings Settings object passed from transformVars()\n * @param {string} [__recursiveFallback] Fallback when unable to resolve CSS\n *                 var() function to a map or fallback value. Allows restoring\n *                 original var() function from recursive resolveValue() calls.\n * @return {string} CSS value with var() function(s) resolved to map or fallback\n *                  value.\n *\n * @example\n *\n *   resolveValue('10px var(--x) 30px', {'--x':'20px'}, {...settings});\n *   // => '10px 20px 30px'\n *\n *   resolveValue('10px', {}, {...settings});\n *   // => '10px'\n */\nfunction resolveValue(value, map, settings = {}, __recursiveFallback) {\n    const varFuncData  = balanced('var(', ')', value);\n    const warningIntro = 'CSS transform warning:';\n\n    /**\n     * Resolves contents of CSS custom property function\n     *\n     * @param {string} value String containing contents of CSS var() function\n     * @returns {string}\n     *\n     * @example\n     *\n     *   resolveFunc('--x, var(--y, green)')\n     *   // => map['--x'] or map['--y'] or 'green'\n     *\n     *   resolveFunc('--fail')\n     *   // => 'var(--fail)' when map['--fail'] does not exist\n     */\n    function resolveFunc(value) {\n        const name               = value.split(',')[0];\n        const fallback           = (value.match(/(?:\\s*,\\s*){1}(.*)?/) || [])[1];\n        const match              = map.hasOwnProperty(name) ? String(map[name]) : undefined;\n        const replacement        = match || (fallback ? String(fallback) : undefined);\n        const unresolvedFallback = __recursiveFallback || value;\n\n        if (!match) {\n            settings.onWarning(`${warningIntro} variable \"${name}\" is undefined`);\n        }\n\n        if (replacement && replacement !== 'undefined' && replacement.length > 0) {\n            return resolveValue(replacement, map, settings, unresolvedFallback);\n        }\n        else {\n            return `var(${unresolvedFallback})`;\n        }\n    }\n\n    if (!varFuncData) {\n        if (value.indexOf('var(') !== -1) {\n            settings.onWarning(`${warningIntro} missing closing \")\" in the value \"${value}\"`);\n        }\n\n        return value;\n    }\n    else if (varFuncData.body.trim().length === 0) {\n        settings.onWarning(`${warningIntro} var() must contain a non-whitespace string`);\n\n        return value;\n    }\n    else {\n        return (\n            varFuncData.pre\n            + resolveFunc(varFuncData.body)\n            + resolveValue(varFuncData.post, map, settings)\n        );\n    }\n}\n\n\n// Exports\n// =============================================================================\nexport default transformVars;\nexport { variablePersistStore };","// Dependencies\n// =============================================================================\nimport getCssData               from 'get-css-data';\nimport mergeDeep                from './merge-deep';\nimport transformCss             from './transform-css';\nimport { variablePersistStore } from './transform-css';\nimport { name as pkgName }      from '../package.json';\n\n\n// Constants & Variables\n// =============================================================================\nconst isBrowser       = typeof window !== 'undefined';\nconst isNativeSupport = isBrowser && window.CSS && window.CSS.supports && window.CSS.supports('(--a: 0)');\n\nconst defaults = {\n    // Sources\n    rootElement  : isBrowser ? document : null,\n    include      : 'style,link[rel=stylesheet]',\n    exclude      : '',\n    // Options\n    fixNestedCalc: true,  // transformCss\n    onlyLegacy   : true,  // cssVars\n    onlyVars     : false, // cssVars, transformCss\n    preserve     : false, // transformCss\n    shadowDOM    : false, // cssVars\n    silent       : false, // cssVars\n    updateDOM    : true,  // cssVars\n    updateURLs   : true,  // cssVars\n    variables    : {},    // transformCss\n    watch        : false, // cssVars\n    // Callbacks\n    onBeforeSend() {},    // cssVars\n    onSuccess() {},       // cssVars\n    onWarning() {},       // transformCss\n    onError() {},         // cssVars\n    onComplete() {}       // cssVars\n};\nconst regex = {\n    // CSS comments\n    cssComments: /\\/\\*[\\s\\S]+?\\*\\//g,\n    // CSS keyframes (@keyframes & @-VENDOR-keyframes)\n    cssKeyframes: /@(?:-\\w*-)?keyframes/,\n    // CSS root vars\n    cssRootRules: /(?::root\\s*{\\s*[^}]*})/g,\n    // CSS url(...) values\n    cssUrls: /url\\((?!['\"]?(?:data|http|\\/\\/):)['\"]?([^'\")]*)['\"]?\\)/g,\n    // CSS variable :root declarations and var() function values\n    cssVars: /(?:(?::root\\s*{\\s*[^;]*;*\\s*)|(?:var\\(\\s*))(--[^:)]+)(?:\\s*[:)])/\n};\n\n// Mutation observer referece created via options.watch\nlet cssVarsObserver  = null;\n\n// Indicates if document-level custom property values have been parsed, stored,\n// and ready for use with options.shadowDOM\nlet isShadowDOMReady = false;\n\n\n// Functions\n// =============================================================================\n/**\n * Fetches, parses, and transforms CSS custom properties from specified\n * <style> and <link> elements into static values, then appends a new <style>\n * element with static values to the DOM to provide CSS custom property\n * compatibility for legacy browsers. Also provides a single interface for\n * live updates of runtime values in both modern and legacy browsers.\n *\n * @preserve\n * @param {object}   [options] Options object\n * @param {object}   [options.rootElement=document] Root element to traverse for\n *                   <link> and <style> nodes.\n * @param {string}   [options.include=\"style,link[rel=stylesheet]\"] CSS selector\n *                   matching <link re=\"stylesheet\"> and <style> nodes to\n *                   process\n * @param {string}   [options.exclude] CSS selector matching <link\n *                   rel=\"stylehseet\"> and <style> nodes to exclude from those\n *                   matches by options.include\n * @param {boolean}  [options.fixNestedCalc=true] Removes nested 'calc' keywords\n *                   for legacy browser compatibility.\n * @param {boolean}  [options.onlyLegacy=true] Determines if the ponyfill will\n *                   only generate legacy-compatible CSS in browsers that lack\n *                   native support (i.e., legacy browsers)\n * @param {boolean}  [options.onlyVars=false] Determines if CSS rulesets and\n *                   declarations without a custom property value should be\n *                   removed from the ponyfill-generated CSS\n * @param {boolean}  [options.preserve=false] Determines if the original CSS\n *                   custom property declaration will be retained in the\n *                   ponyfill-generated CSS.\n * @param {boolean}  [options.shadowDOM=false] Determines if shadow DOM <link>\n *                   and <style> nodes will be processed.\n * @param {boolean}  [options.silent=false] Determines if warning and error\n *                   messages will be displayed on the console\n * @param {boolean}  [options.updateDOM=true] Determines if the ponyfill will\n *                   update the DOM after processing CSS custom properties\n * @param {boolean}  [options.updateURLs=true] Determines if the ponyfill will\n *                   convert relative url() paths to absolute urls.\n * @param {object}   [options.variables] A map of custom property name/value\n *                   pairs. Property names can omit or include the leading\n *                   double-hyphen (—), and values specified will override\n *                   previous values.\n * @param {boolean}  [options.watch=false] Determines if a MutationObserver will\n *                   be created that will execute the ponyfill when a <link> or\n *                   <style> DOM mutation is observed.\n * @param {function} [options.onBeforeSend] Callback before XHR is sent. Passes\n *                   1) the XHR object, 2) source node reference, and 3) the\n *                   source URL as arguments.\n * @param {function} [options.onSuccess] Callback after CSS data has been\n *                   collected from each node and before CSS custom properties\n *                   have been transformed. Allows modifying the CSS data before\n *                   it is transformed by returning any string value (or false\n *                   to skip). Passes 1) CSS text, 2) source node reference, and\n *                   3) the source URL as arguments.\n * @param {function} [options.onWarning] Callback after each CSS parsing warning\n *                   has occurred. Passes 1) a warning message as an argument.\n * @param {function} [options.onError] Callback after a CSS parsing error has\n *                   occurred or an XHR request has failed. Passes 1) an error\n *                   message, and 2) source node reference, 3) xhr, and 4 url as\n *                   arguments.\n * @param {function} [options.onComplete] Callback after all CSS has been\n *                   processed, legacy-compatible CSS has been generated, and\n *                   (optionally) the DOM has been updated. Passes 1) a CSS\n *                   string with CSS variable values resolved, 2) a reference to\n *                   the appended <style> node, and 3) an object containing all\n *                   custom properies names and values.\n *\n * @example\n *\n *   cssVars({\n *     rootElement  : document,\n *     include      : 'style,link[rel=\"stylesheet\"]',\n *     exclude      : '',\n *     fixNestedCalc: true,\n *     onlyLegacy   : true,\n *     onlyVars     : false,\n *     preserve     : false,\n *     shadowDOM    : false,\n *     silent       : false,\n *     updateDOM    : true,\n *     updateURLs   : true,\n *     variables    : {\n *       // ...\n *     },\n *     watch        : false,\n *     onBeforeSend(xhr, node, url) {\n *       // ...\n *     }\n *     onSuccess(cssText, node, url) {\n *       // ...\n *     },\n *     onWarning(message) {\n *       // ...\n *     },\n *     onError(message, node) {\n *       // ...\n *     },\n *     onComplete(cssText, styleNode) {\n *       // ...\n *     }\n *   });\n */\nfunction cssVars(options = {}) {\n    const settings    = mergeDeep(defaults, options);\n    const styleNodeId = pkgName;\n\n    // Always exclude styleNodeId element, which is the generated <style> node\n    // containing previously transformed CSS.\n    settings.exclude = `#${styleNodeId}` + (settings.exclude ? `,${settings.exclude}` : '');\n\n    function handleError(message, sourceNode, xhr, url) {\n        /* istanbul ignore next */\n        if (!settings.silent) {\n            // eslint-disable-next-line\n            console.error(`${message}\\n`, sourceNode);\n        }\n\n        settings.onError(message, sourceNode, xhr, url);\n    }\n\n    function handleWarning(message) {\n        /* istanbul ignore next */\n        if (!settings.silent) {\n            // eslint-disable-next-line\n            console.warn(message);\n        }\n\n        settings.onWarning(message);\n    }\n\n    // Exit if non-browser environment (e.g. Node)\n    if (!isBrowser) {\n        return;\n    }\n\n    // Verify readyState to ensure all <link> and <style> nodes are available\n    if (document.readyState !== 'loading') {\n        const isShadowElm = settings.shadowDOM || settings.rootElement.shadowRoot || settings.rootElement.host;\n\n        // Native support\n        if (isNativeSupport && settings.onlyLegacy) {\n            // Apply settings.variables\n            if (settings.updateDOM) {\n                const targetElm = settings.rootElement.host || (settings.rootElement === document ? document.documentElement : settings.rootElement);\n\n                // Set variables using native methods\n                Object.keys(settings.variables).forEach(key => {\n                    // Convert all property names to leading '--' style\n                    const prop  = `--${key.replace(/^-+/, '')}`;\n                    const value = settings.variables[key];\n\n                    targetElm.style.setProperty(prop, value);\n                });\n            }\n        }\n        // Ponyfill: Handle rootElement set to a shadow host or root\n        else if (isShadowElm && !isShadowDOMReady) {\n            // Get all document-level CSS\n            getCssData({\n                rootElement: defaults.rootElement,\n                include: defaults.include,\n                exclude: settings.exclude,\n                onSuccess(cssText, node, url) {\n                    const cssRootDecls = (cssText.match(regex.cssRootRules) || []).join('');\n\n                    // Return only matching :root {...} blocks\n                    return cssRootDecls || false;\n                },\n                onComplete(cssText, cssArray, nodeArray) {\n                    // Transform CSS, which stores custom property values from\n                    // cssText in variablePersistStore. This step ensures that\n                    // variablePersistStore contains all document-level custom\n                    // property values for subsequent ponyfill calls.\n                    transformCss(cssText, {\n                        persist: true\n                    });\n\n                    isShadowDOMReady = true;\n\n                    // Call the ponyfill again to process the rootElement\n                    // initially specified. Values stored in variablePersistStore\n                    // will be used to transform values in shadow host/root\n                    // elements.\n                    cssVars(settings);\n                }\n            });\n        }\n        // Ponyfill: Process CSS\n        else {\n            if (settings.watch) {\n                addMutationObserver(settings, styleNodeId);\n            }\n\n            getCssData({\n                rootElement: settings.rootElement,\n                include: settings.include,\n                exclude: settings.exclude,\n                // This filter does a test on each block of CSS. An additional\n                // filter is used in the parser to remove individual\n                // declarations.\n                filter: settings.onlyVars ? regex.cssVars : null,\n                onBeforeSend: settings.onBeforeSend,\n                onSuccess(cssText, node, url) {\n                    const returnVal = settings.onSuccess(cssText, node, url);\n\n                    cssText = returnVal === false ? '' : returnVal || cssText;\n\n                    // Convert relative url(...) values to absolute\n                    if (settings.updateURLs) {\n                        const cssUrls = cssText\n                            // Remove comments to avoid processing @import in comments\n                            .replace(regex.cssComments, '')\n                            // Match url(...) values\n                            .match(regex.cssUrls) || [];\n\n                        cssUrls.forEach(cssUrl => {\n                            const oldUrl = cssUrl.replace(regex.cssUrls, '$1');\n                            const newUrl = getFullUrl(oldUrl, url);\n\n                            cssText = cssText.replace(cssUrl, cssUrl.replace(oldUrl, newUrl));\n                        });\n                    }\n\n                    return cssText;\n                },\n                onError(xhr, node, url) {\n                    const responseUrl = xhr.responseURL || getFullUrl(url, location.href);\n                    const statusText  = xhr.statusText ? `(${xhr.statusText})` : 'Unspecified Error' + (xhr.status === 0 ? ' (possibly CORS related)' : '');\n                    const errorMsg    = `CSS XHR Error: ${responseUrl} ${xhr.status} ${statusText}`;\n\n                    handleError(errorMsg, node, xhr, responseUrl);\n                },\n                onComplete(cssText, cssArray, nodeArray) {\n                    const cssMarker = /\\/\\*__CSSVARSPONYFILL-(\\d+)__\\*\\//g;\n                    let   styleNode = null;\n\n                    // Concatenate cssArray items, replacing those that do not\n                    // contain a CSS custom property declaraion or function with\n                    // a temporary marker . After the CSS is transformed, the\n                    // markers will be replaced with the matching cssArray item.\n                    // This optimization is done to avoid processing CSS that\n                    // will not change as a results of the ponyfill.\n                    cssText = cssArray.map((css, i) => regex.cssVars.test(css) ? css : `/*__CSSVARSPONYFILL-${i}__*/`).join('');\n\n                    try {\n                        cssText = transformCss(cssText, {\n                            fixNestedCalc: settings.fixNestedCalc,\n                            onlyVars     : settings.onlyVars,\n                            persist      : settings.updateDOM,\n                            preserve     : settings.preserve,\n                            variables    : settings.variables,\n                            onWarning    : handleWarning\n                        });\n\n                        const hasKeyframes = regex.cssKeyframes.test(cssText);\n\n                        // Replace markers with appropriate cssArray item\n                        cssText = cssText.replace(cssMarker, (match, group1) => cssArray[group1]);\n\n                        if (settings.updateDOM && nodeArray && nodeArray.length) {\n                            const lastNode = nodeArray[nodeArray.length - 1];\n\n                            styleNode = settings.rootElement.querySelector(`#${styleNodeId}`) || document.createElement('style');\n                            styleNode.setAttribute('id', styleNodeId);\n\n                            if (styleNode.textContent !== cssText) {\n                                styleNode.textContent = cssText;\n                            }\n\n                            // Insert <style> element after last nodeArray item\n                            if (lastNode.nextSibling !== styleNode && lastNode.parentNode) {\n                                lastNode.parentNode.insertBefore(styleNode, lastNode.nextSibling);\n                            }\n\n                            if (hasKeyframes) {\n                                fixKeyframes(settings.rootElement);\n                            }\n                        }\n                    }\n                    catch(err) {\n                        let errorThrown = false;\n\n                        // Iterate cssArray to detect CSS text and node(s)\n                        // responsibile for error.\n                        cssArray.forEach((cssText, i) => {\n                            try {\n                                cssText = transformCss(cssText, settings);\n                            }\n                            catch(err) {\n                                const errorNode = nodeArray[i - 0];\n\n                                errorThrown = true;\n                                handleError(err.message, errorNode);\n                            }\n                        });\n\n                        // In the event the error thrown was not due to\n                        // transformCss, handle the original error.\n                        /* istanbul ignore next */\n                        if (!errorThrown) {\n                            handleError(err.message || err);\n                        }\n                    }\n\n                    // Process shadow DOM\n                    if (settings.shadowDOM) {\n                        const elms = [\n                            settings.rootElement,\n                            ...settings.rootElement.querySelectorAll('*')\n                        ];\n\n                        // Iterates over all elements in rootElement and calls\n                        // cssVars on each shadowRoot, passing document-level\n                        // custom properties as options.variables.\n                        for (let i = 0, elm; (elm = elms[i]); ++i) {\n                            if (elm.shadowRoot && elm.shadowRoot.querySelector('style')) {\n                                const shadowSettings = mergeDeep(settings, {\n                                    rootElement: elm.shadowRoot,\n                                    variables  : variablePersistStore\n                                });\n\n                                cssVars(shadowSettings);\n                            }\n                        }\n                    }\n\n                    settings.onComplete(cssText, styleNode, variablePersistStore);\n                }\n            });\n        }\n\n    }\n    // Delay function until DOMContentLoaded event is fired\n    /* istanbul ignore next */\n    else {\n        document.addEventListener('DOMContentLoaded', function init(evt) {\n            cssVars(options);\n\n            document.removeEventListener('DOMContentLoaded', init);\n        });\n    }\n}\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Creates mutation observer that executes the ponyfill when a <link> or <style>\n * DOM mutation is observed.\n *\n * @param {object} settings\n * @param {string} ignoreId\n */\nfunction addMutationObserver(settings, ignoreId) {\n    if (window.MutationObserver && !cssVarsObserver) {\n        const isLink  = node => node.tagName === 'LINK' && (node.getAttribute('rel') || '').indexOf('stylesheet') !== -1;\n        const isStyle = node => node.tagName === 'STYLE' && (ignoreId ? node.id !== ignoreId : true);\n\n        let debounceTimer = null;\n\n        cssVarsObserver = new MutationObserver(function(mutations) {\n            let isUpdateMutation = false;\n\n            mutations.forEach(mutation => {\n                if (mutation.type === 'attributes') {\n                    isUpdateMutation = isLink(mutation.target) || isStyle(mutation.target);\n                }\n                else if (mutation.type === 'childList') {\n                    const addedNodes   = Array.apply(null, mutation.addedNodes);\n                    const removedNodes = Array.apply(null, mutation.removedNodes);\n\n                    isUpdateMutation = [].concat(addedNodes, removedNodes).some(node => {\n                        const isValidLink  = isLink(node) && !node.disabled;\n                        const isValidStyle = isStyle(node) && !node.disabled && regex.cssVars.test(node.textContent);\n\n                        return (isValidLink || isValidStyle);\n                    });\n                }\n\n                if (isUpdateMutation) {\n                    clearTimeout(debounceTimer);\n\n                    debounceTimer = setTimeout(function() {\n                        cssVars(settings);\n                    }, 1);\n                }\n            });\n        });\n\n        cssVarsObserver.observe(document.documentElement, {\n            attributes     : true,\n            attributeFilter: ['disabled', 'href'],\n            childList      : true,\n            subtree        : true\n        });\n    }\n}\n\n/**\n * Fixes issue keyframe properties set using CSS custom property not being\n * applied properly in some legacy (IE) and modern (Safari) browsers.\n */\nfunction fixKeyframes(rootElement) {\n    const animationNameProp = [\n        'animation-name',\n        '-moz-animation-name',\n        '-webkit-animation-name'\n    ].filter(prop => getComputedStyle(document.body)[prop])[0];\n\n    if (animationNameProp) {\n        const allNodes      = rootElement.getElementsByTagName('*');\n        const keyframeNodes = [];\n        const nameMarker    = '__CSSVARSPONYFILL-KEYFRAMES__';\n\n        // Modify animation name\n        for (let i = 0, len = allNodes.length; i < len; i++) {\n            const node          = allNodes[i];\n            const animationName = getComputedStyle(node)[animationNameProp];\n\n            if (animationName !== 'none') {\n                node.style[animationNameProp] += nameMarker;\n                keyframeNodes.push(node);\n            }\n        }\n\n        // Force reflow\n        void document.body.offsetHeight;\n\n        // Restore animation name\n        for (let i = 0, len = keyframeNodes.length; i < len; i++) {\n            const nodeStyle = keyframeNodes[i].style;\n\n            nodeStyle[animationNameProp] = nodeStyle[animationNameProp].replace(nameMarker, '');\n        }\n    }\n}\n\n/**\n * Returns fully qualified URL from relative URL and (optional) base URL\n *\n * @param {any} url\n * @param {any} [base=location.href]\n * @returns\n */\nfunction getFullUrl(url, base = location.href) {\n    const d = document.implementation.createHTMLDocument('');\n    const b = d.createElement('base');\n    const a = d.createElement('a');\n\n    d.head.appendChild(b);\n    d.body.appendChild(a);\n    b.href = base;\n    a.href = url;\n\n    return a.href;\n}\n\n\n// Export\n// =============================================================================\nexport default cssVars;\n"],"names":["getUrls","urls","options","arguments","length","undefined","settings","mimeType","onBeforeSend","Function","prototype","onSuccess","onError","onComplete","urlArray","Array","isArray","urlQueue","apply","map","x","xhr","urlIndex","responseText","returnVal","indexOf","forEach","url","i","parser","document","createElement","setAttribute","href","String","isCrossDomain","host","location","isSameProtocol","protocol","XDomainRequest","xdr","open","timeout","onprogress","ontimeout","onload","onerror","err","setTimeout","send","console","log","XMLHttpRequest","overrideMimeType","onreadystatechange","readyState","status","getCssData","regex","cssComments","cssImports","rootElement","include","exclude","filter","useCSSOM","sourceNodes","querySelectorAll","node","matchesSelector","cssArray","handleComplete","isComplete","cssText","join","handleSuccess","cssIndex","sourceUrl","resolveImports","resolvedCssText","errorData","data","test","parseImportData","baseUrl","ignoreRules","importData","rules","replace","match","rule","absoluteUrls","getFullUrl","absoluteRules","oldUrl","newUrl","callbackFn","__errorData","__errorRules","responseImportData","push","responseArray","importText","linkHref","getAttribute","linkRel","isLink","nodeName","toLowerCase","isStyle","textContent","sheet","cssRules","base","d","implementation","createHTMLDocument","b","a","head","appendChild","body","elm","selector","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","call","mergeDeep","isObject","obj","Object","constructor","objects","reduce","prev","keys","key","pVal","oVal","balanced","str","RegExp","maybeMatch","r","range","start","end","pre","slice","post","reg","m","begs","beg","left","right","result","ai","bi","pop","cssParse","css","errors","error","msg","Error","re","exec","whitespace","close","comment","type","comments","cmnts","c","trim","split","s","declaration","comment_regexp","prop","val","ret","property","value","declarations","decls","concat","keyframe","vals","values","at_keyframes","vendor","name","frame","frames","keyframes","at_page","sel","selectors","at_fontface","at_supports","supports","at_host","at_media","media","at_custom_m","at_document","at_x","at_rule","core","stylesheet","stringifyCss","tree","delim","cb","renderMethods","charset","visit","import","namespace","page","nodes","buf","n","txt","walkCss","fn","VAR_PROP_IDENTIFIER","VAR_FUNC_IDENTIFIER","variablePersistStore","transformVars","defaults","fixNestedCalc","onlyVars","persist","preserve","variables","onWarning","JSON","parse","stringify","cssTree","parseCss","filterVars","varNameIndices","decl","splice","newRule","resolvedValue","resolveValue","declArray","hasVarProp","hasVarVal","Boolean","k","reCalcExp","oldValue","newValue","rootCalc","nestedCalc","__recursiveFallback","varFuncData","warningIntro","resolveFunc","fallback","hasOwnProperty","replacement","unresolvedFallback","isBrowser","window","isNativeSupport","CSS","onlyLegacy","shadowDOM","silent","updateDOM","updateURLs","watch","cssKeyframes","cssRootRules","cssUrls","cssVars","cssVarsObserver","isShadowDOMReady","styleNodeId","pkgName","handleError","message","sourceNode","handleWarning","warn","isShadowElm","shadowRoot","targetElm","documentElement","style","setProperty","cssRootDecls","nodeArray","transformCss","addMutationObserver","cssUrl","responseUrl","responseURL","statusText","errorMsg","cssMarker","styleNode","hasKeyframes","group1","lastNode","querySelector","nextSibling","parentNode","insertBefore","fixKeyframes","errorThrown","errorNode","elms","shadowSettings","addEventListener","init","evt","removeEventListener","ignoreId","MutationObserver","tagName","id","debounceTimer","mutations","isUpdateMutation","mutation","target","addedNodes","removedNodes","some","isValidLink","disabled","isValidStyle","clearTimeout","observe","attributes","attributeFilter","childList","subtree","animationNameProp","getComputedStyle","allNodes","getElementsByTagName","keyframeNodes","nameMarker","len","animationName","offsetHeight","nodeStyle"],"mappings":"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"}